static_resources:
  listeners:
  - name: sqlserver_listener
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 1433
    filter_chains:
    - filters:
      - name: envoy.filters.network.tcp_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
          stat_prefix: sqlserver_tcp
          cluster: sqlserver_cluster
          tunneling_config:
            hostname: host.com:443
            headers_to_add:
            - header:
                key: original_dst_port
                value: "%DOWNSTREAM_LOCAL_PORT%"

  clusters:
  - name: sqlserver_cluster
    type: STRICT_DNS
    connect_timeout: 5s
    # This ensures HTTP/2 CONNECT is used for establishing the tunnel.
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    load_assignment:
      cluster_name: sqlserver_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: ec2-15-237-141-53.eu-west-3.compute.amazonaws.com
                port_value: 443
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          tls_certificates:
          - certificate_chain:
              filename: certs/clientcert.pem
            private_key:
              filename: certs/clientkey.pem
          validation_context:
            match_typed_subject_alt_names:
            - san_type: DNS
              matcher:
                exact: proxy-sqlserver-backend.mydomain.com
            trusted_ca:
              filename: certs/cacert.pem